# This is an auto generated Dockerfile for ros:ros-base
# generated from docker_images_ros2/create_ros_image.Dockerfile.em
FROM ros:humble-ros-core-jammy

# install bootstrap tools
RUN apt-get update && apt-get install --no-install-recommends -y \
    build-essential \
    git \
    python3-pip \
    python3-colcon-common-extensions \
    python3-colcon-mixin \
    python3-rosdep \
    python3-vcstool \
    && rm -rf /var/lib/apt/lists/*
    # nano \

# bootstrap rosdep
RUN rosdep init && \
  rosdep update --rosdistro $ROS_DISTRO

# setup colcon mixin and metadata
RUN colcon mixin add default \
      https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
    colcon mixin update && \
    colcon metadata add default \
      https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
    colcon metadata update

# install ros2 packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-humble-ros-base=0.10.0-1* \
    && rm -rf /var/lib/apt/lists/*

# create the directory and clone the DynamixelSDK into it
WORKDIR /home/ros/lib
RUN git clone https://github.com/ROBOTIS-GIT/DynamixelSDK.git

# resolves this issue: "1 package had stderr output: my_robot_controller" when we are building the new package
RUN sudo pip3 install setuptools==58.2.0 \
    flask-mqtt \
    paho-mqtt \
    dynamixel_sdk
    # RPi.GPIO

# enable ROS functionality on every tty instance => add this code to the end of bash tty
# ros2 command with all of its functionality
RUN echo "source /opt/ros/humble/setup.bash" >> /root/.bashrc
# colcon (building workspace command) autocompletion
RUN echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> /root/.bashrc
# setup the correct node source for a custom workspace
RUN echo "source /home/ros/hexapod_controller/install/setup.bash" >> /root/.bashrc

# Build the packages since we removed the build and install directories from the repostiory because they caused issues when pulling on a different machine
WORKDIR /home/ros/hexapod_controller
RUN colcon build --packages-select hexapod_controller_interfaces
RUN colcon build --packages-select hexapod_controller --symlink-install


# NETWORK CONFIG (might be useful in the future)
# Define some ENV Vars
# ENV PORT=80 \
  # DIRECTORY=/ros \
  # IS_DOCKER=true
# Expose the port
# EXPOSE ${PORT}